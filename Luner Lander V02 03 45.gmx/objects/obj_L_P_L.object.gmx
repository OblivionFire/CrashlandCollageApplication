<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>spr_rocket</spriteName>
  <solid>-1</solid>
  <visible>-1</visible>
  <depth>2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>spr_rocket</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>101</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_move</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>111101111</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>0</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Declaring All Variablies 

//Fuel capasity
fuel = 75;

//speed coming into orbit
orbit_speed = .25;

//Throttle of engine(a 1-100 multiplier of force facter) 
throttle = 0;

// Rocket thrust will be multiplyed by whole number (1-100)
forcefacter = .000001;

//the speed at witch fuel is used muliplied by throttle
fuel_comsupmtion_rate = .00005;

//A cheacking vareable allowing only one vertical speed cheack to be run(only the best result)
landingvs = 1;

//A cheacking vareable allowing only one horizontal speed cheack to be run(onely the best result)
landinghs = 1;

//Cheacking for a good landing, must equal two(both V and H speed must be with in condition)
good_landing = 0;

//Cheaking for a good landing, must equal one(if either V or H speed is out side of safe zone this will run)
hard_landing = 0;

//Cheacking if the landing is so horrible, that the fuel tank will crack/ be smashed after tipping(will run if dead is one)
dead = 0;

//Only allowing one landing message to display at one time
landing_message = 1;

//Rotation speed

rspeed = 1.2;

//Remembering landing cord
global.obj_L_P_L_land_cord_x = 0

global.obj_L_P_L_land_cord_y = 0



</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Orbital commands

//The orbital horizontal speed(The speed the ship comes flying in from the left/right of the screen)
hspeed = orbit_speed

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Ship Rotation

// Smothly rotates the ship to face the mouse

//Value holder
mx = mouse_x
my = mouse_y

pointdir = point_direction(x, y, mx, my);

//Rotation code

image_angle += sin(degtorad(pointdir - image_angle)) * rspeed;
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cheacking landing HS

//shortaning the verable to make it easer to handle
hs = hspeed;

//cheackig for a good landing
if((hs&lt;.005) &amp;&amp; (landinghs = 1) &amp;&amp; place_meeting(x, (y + hs), obj_landing_creater)){
good_landing += 1;
landinghs = 0;
}
    //Cheacking for a hard landing
    if((hs&gt;.005) &amp;&amp; (hs&lt;.01) &amp;&amp; (landinghs = 1) &amp;&amp; place_meeting(x, (y + hs), obj_landing_creater)){
    hard_landing += 1;
    landinghs = 0;
    } 
//Cheacking for a tip(dead)
if((hs&gt;.01) &amp;&amp; (landinghs = 1) &amp;&amp; place_meeting(x, (y + hs), obj_landing_creater)){
dead += 1;
landinghs = 0;
}

//The way this is constructed is very important,
//You must work your way from the softest landing down 
//Other wise all will trigger
//Landinghs is a verable that only allows one(the best) message to show
//good_landing, hard_landing, and tip are all
//verables that will be ckeacked in the step event and run to show landing status and mesages
//good_landing is a best case landing must = 2 to display
//hard landing is a safe landing but could be better must =1 to display
//tip &amp;&amp; explotion is a cataclismic ending were you die
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cheacking VS landing

//shorting the verable to make it easer to handle
vs = vspeed;

//cheacking for a good landing 
if((vs&lt;.015) &amp;&amp; (landingvs = 1) &amp;&amp; place_meeting(x, (y + hs), obj_landing_creater)){
good_landing += 1;
landingvs = 0;
}
    //Cheacking for a hard landing
    if((vs&gt;.015) &amp;&amp; (vs&lt;.03) &amp;&amp; (landingvs = 1) &amp;&amp; place_meeting(x, (y + hs), obj_landing_creater)){
    hard_landing += 1;
    landindvs = 0;
    }
//cheacking for a explotion(dead)
if((vs&gt;.03) &amp;&amp; (landingvs = 1) &amp;&amp; place_meeting(x, (y + hs), obj_landing_creater)){
dead = 1;
landingvs = 0
}

//The way this is constructed is very important,
//You must work your way from the softest landing down 
//Other wise all will trigger
//LandingVS is a verable that only allows one(the best) message to show
// good_landing, hard_landing, and explotion are all
// verables that will be ckeacked in the step event and run to show landing status and mesages
//good_landing is a best case landing must = 2 to display
// hard landing is a safe landing but could be better must =1 to display
// tip &amp;&amp; explotion is a cataclismic ending were you die
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rocket Thrust and Fuel 


//Setting fuel to obj_L_P_L.fuel
fuel_lander = obj_L_P_L.fuel

//hard Locking engines to 0 thrust if out of fuel
if(fuel_lander &lt; 0){
forcefacter = 0
throttle = 0
sprite_index = spr_rocket
}

    if(fuel_lander &gt; 0){
//Apllying throttle
forcefacter_actual = forcefacter*throttle

//apllying throttle to fuel comsupmtion
fuel_consumption = fuel_comsupmtion_rate*(-throttle)

//Changing value of fuel
fuel += fuel_consumption


///Changing rocket sprite based on throttle
if(throttle=0){
sprite_index = spr_rocket
}
    if(0&lt;throttle &amp;&amp; throttle&lt;20){
    sprite_index = spr_L_P_L_20
    }
if(20&lt;throttle &amp;&amp; throttle&lt;40){
sprite_index = spr_L_P_L_40
}
    if(40&lt;throttle &amp;&amp; throttle&lt;60){
    sprite_index = spr_L_P_L_60
    }
if(60&lt;throttle &amp;&amp; throttle&lt;80){
sprite_index = spr_L_P_L_80
}
    if(80&lt;throttle &amp;&amp; throttle&lt;100.1){
    sprite_index = spr_L_P_L_100
    }
    }
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Landing messages

//catastrophic failure of jakob to land correctly
//restarts the room so you can try again
if((dead &gt; .9) &amp;&amp; (landing_message = 1)){
show_message("You have caused substatial damage to the lander");
landing_message = 0;
room_restart()
}

    //hard landing    
    if((hard_landing &gt; .9) &amp;&amp; (landing_message = 1)){
    show_message("hard landing");
    landing_message = 0;
    room_goto(Cargo_lander_tutoial);
    }
    
//good landing
if((good_landing = 2) &amp;&amp; (landing_message = 1)){
show_message("good landing");
landing_message = 0;
room_goto(Cargo_lander_tutoial);
}   
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Global verable decloration

//setting x value to global to be called upon latter by other objects
global.obj_L_P_L_land_cord_x = x 

//setting y value to global to be called upon latter by other objects
global.obj_L_P_L_land_cord_y = y
</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>107</id>
        <kind>0</kind>
        <userelative>-1</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_set_gravity</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>0</kind>
            <string>point_direction(x,y,mouse_x, mouse_y)</string>
          </argument>
          <argument>
            <kind>0</kind>
            <string>forcefacter_actual</string>
          </argument>
        </arguments>
      </action>
      <action>
        <libid>1</libid>
        <id>112</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_wrap</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>4</kind>
            <string>2</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mt_pfour">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restarting the room if you crash


show_message("I don't know if you missed this bit
But the goal was to not go fly into the Mountain") 

room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mt_pthree">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restarting the room if you crash


show_message("I don't know if you missed this bit
But the goal was to not go fly into the Mountain") 

room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mt_ptwo">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restarting the room if you crash


show_message("I don't know if you missed this bit
But the goal was to not go fly into the Mountain") 

room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_mt_pone">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Restarting the room if you crash


show_message("I don't know if you missed this bit
But the goal was to not go fly into the Mountain") 

room_restart()
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="4" ename="obj_S_L_O">
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_L_P_L_fuel</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_horizontal_speed_ui</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_horizontal_speed</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_vertical_speed_ui</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_vertical_speed</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>obj_throttle_ui</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
      <action>
        <libid>1</libid>
        <id>203</id>
        <kind>0</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>1</exetype>
        <functionname>action_kill_object</functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
      </action>
    </event>
    <event eventtype="6" enumb="61">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Kill throttle

// killing the throttel if the mouse wheel is flicked down
throttle = 0

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="60">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Full throttle

//Maxing out the throttel when the mouse wheel is flicked up
throttle = 100
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="51">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Throttle Down 

//Throtteling down when holding the right mouse button
if(throttle &gt; 0)
{
throttle += (-.5)
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="6" enumb="50">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Rocket Thrust

//Throtteling up When holding the left mouse
if(throttle &lt; 100)
{
throttle +=.5
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
